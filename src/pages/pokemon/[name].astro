---
import type { GetStaticPaths } from "astro";
import Layout from "@layouts/Layout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list-response";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({ params: { name }, props: { url } }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
const capitalizedName =
  name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
---

<Layout
  title=`Pokemon - #${id} ${capitalizedName}`
  description=`Information about the pokemon ${capitalizedName}`
  image={imgSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <PokemonCard name={name} , url={url} , standAlone />
  </section></Layout
>
<script>
  interface FavoritePokemon {
    name: string;
    id: number;
  }

  const searchInList = (searchList: FavoritePokemon[], name: string) => {
    return searchList.some((fav) => fav.name === name);
  };

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;

    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

    if (
      heartFull.classList.contains("hidden") &&
      searchInList(favoritePokemons, name)
    ) {
      heartFull.classList.remove("hidden");
      heartOutline.classList.add("hidden");
    } else if (
      heartOutline.classList.contains("hidden") &&
      searchInList(favoritePokemons, name)
    ) {
      heartFull.classList.add("hidden");
      heartOutline.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = searchInList(favoritePokemons, name);
      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => {
          console.log({ fav: fav.name, name, isDif: fav.name !== name });
          return fav.name !== name;
        });
        console.log(favoritePokemons);
      } else {
        favoritePokemons.push({ name, id: +id });
      }
      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");
      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>
